__author__ = 'michaelstarin'

import time
from datetime import datetime
from datetime import timedelta

import httplib
import json
import matplotlib.pyplot as plt
import numpy as np
import os
import threading
import urllib
from Restful import RestfulAPI
from ReversalMinMax import Reversal
from VectorMachine import RSS5
from Support_Resistance import SRZones
from pandas.io.json import json_normalize


class RSS1:
    def __init__(self, granularity, count, currency_pair, oanda_account_id, oanda_access_token, domain, oanda, period, sensitivity_range, srzone_range):
        self.granularity = granularity
        self.count = count
        self.currency_pair = currency_pair
        self.oanda_account_id = oanda_account_id
        self.oanda_access_token = oanda_access_token
        self.price_type1 = 'closeAsk'
        self.price_type2 = 'openAsk'
        self.oanda = oanda
        self.period = period
        self.array = None
        self.now = None
        self.now_min = None
        self.domain = domain
        self.sensitivity_range = sensitivity_range
        self.srzone_range = srzone_range
        self.minutes = 1
        self.seconds = 60
        global close_ask_array
        global open_ask_array

    def main_fx(self):
        print 'Currency Pair is ', self.currency_pair

        while True:
            self.now = datetime.utcnow()
            #self.now_min = self.now - timedelta(minutes=self.now.minute % self.minutes,
            #                                    seconds=self.now.second % self.seconds,
            #                                    microseconds=self.now.microsecond)
            # Every 15 min on the dot

            if self.now.minute % 1 == 0 and self.now.second % 60 == 0:
                print self.now.minute % 1
                print self.now.second % 60

                self.now = datetime.utcnow()
                self.now_rounded = self.now - timedelta(minutes=self.now.minute % self.minutes,
                                                        seconds=self.now.second % self.seconds,
                                                        microseconds=self.now.microsecond)
                print ' The time is now ', self.now

                # fetch historical candlestick data
                instance2 = RestfulAPI(self.granularity, self.count, self.currency_pair, self.oanda_account_id,
                                       self.oanda_access_token, self.domain, self.now)
                self.array = instance2.get_restful_price()

                instance2 = RestfulAPI(self.granularity, self.count, self.currency_pair, self.oanda_account_id,
                                       self.oanda_access_token, self.domain, self.now)
                self.array = instance2.get_restful_price()

                global close_ask_array
                global open_ask_array

                close_ask_array = np.array(self.array[self.price_type1][0:len(self.array)])
                open_ask_array = np.array(self.array[self.price_type2][0:len(self.array)])
                #print 'self.close_ask_array = np.array(self.array[self.price_type1][0:len(self.array)]) in Main', close_ask_array
                #print 'self.open_ask_array = np.array(self.array[self.price_type2][0:len(self.array)]) in Main', open_ask_array


                # fetch svm model
                instance3 = RSS5(self.granularity, self.count, self.currency_pair, self.oanda_account_id,
                                 self.oanda_access_token, self.domain, self.oanda, self.period,
                                 self.sensitivity_range, self.srzone_range, close_ask_array, open_ask_array)
                ML_model = instance3.main_fx()

                print 'predicted',ML_model
                self.now_rounded = self.now - timedelta(minutes=self.now.minute % self.minutes,
                                                        seconds=self.now.second % self.seconds,
                                                        microseconds=self.now.microsecond)
                print self.now_rounded

                if ML_model == 1:
                    long_price1 = self.oanda.create_order(6980117, instrument=self.currency_pair, units=13000,
                                                          side='buy',
                                                          type='market')
                    print 'BUY 13000 units'

                if ML_model == 0:

                    short_price1 = self.oanda.create_order(6980117, instrument=self.currency_pair, units=13000,
                                                           side='sell',
                                                           type='market')
                    print 'Sell 13000 units'


                print 'open a[-1] is ', open_ask_array[-1]
                print 'close a[-1] is ', close_ask_array[-1]
                #print 'open a[-2] is ', open_ask_array[-2]
                print 'close a[-2] is ', close_ask_array[-2]
                #print 'open a[-3] is ', open_ask_array[-3]
                print 'close a[-3] is ', close_ask_array[-3]

                time.sleep(20)























  
